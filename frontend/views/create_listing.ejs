<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Add a New Product</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        .bubble-option {
            display: inline-block;
            padding: 10px 20px;
            margin: 5px;
            border-radius: 30px;
            border: 2px solid #ccc;
            cursor: pointer;
            transition: all 0.3s;
        }
        .bubble-option.selected {
            background-color: #DA1212;
            color: white;
            border-color: #DA1212;
        }
        .bubble-option input[type="checkbox"] {
            display: none;
        }
        .bubble-option input[type="radio"] {
            display: none;
        }
        .file-input-container {
            position: relative;
            width: 100%;
            height: 200px;
            border: 2px dashed #ccc;
            display: flex;
            justify-content: center;
            align-items: center;
            cursor: pointer;
            background-color: #f7f7f7;
        }
        .file-input-container .plus-sign {
            font-size: 2rem;
            color: #999;
        }
        .file-input-container input[type="file"] {
            position: absolute;
            width: 100%;
            height: 100%;
            opacity: 0;
            cursor: pointer;
        }
        .image-previews {
            display: flex;
            gap: 10px;
            margin-top: 10px;
            flex-wrap: wrap;
        }
        .image-preview {
            width: 120px;
            height: 90px;
            border: 2px solid #ccc;
            border-radius: 5px;
            overflow: hidden;
            background-color: #f7f7f7;
            position: relative;
        }
        .image-preview img {
            width: 100%;
            height: 100%;
            object-fit: cover;
        }
        .image-preview:hover .remove-btn {
            display: block;
        }
        .remove-btn {
            position: absolute;
            top: 5px;
            right: 5px;
            background-color: red;
            color: white;
            border: none;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: none;
            cursor: pointer;
            text-align: center;
            line-height: 18px;
            font-size: 16px;
            font-weight: bold;
        }
        @media (min-width: 640px) {
            .file-input-container {
                height: 300px;
            }
            .file-input-container .plus-sign {
                font-size: 3rem;
            }
            .image-preview {
                width: 140px;
                height: 100px;
            }
        }
    </style>
</head>
<body class="bg-amber-50 flex flex-col min-h-screen">
    <!-- Navigation bar -->
    <%- include('navbar') %>

    <form action="/product/new" method="POST" enctype="multipart/form-data" class="flex flex-col flex-grow">
        <div class="flex flex-col md:flex-row flex-grow p-4">
            <div class="md:w-1/2 p-2">
                <h2 class="text-xl md:text-2xl mb-4">Upload Images</h2>
                <div class="file-input-container" id="file-input-container">
                    <span class="plus-sign">+</span>
                    <input type="file" name="images" id="images" accept="image/*" multiple onchange="previewImages(event)">
                </div>
                <div class="image-previews" id="image-previews">
                    <!-- Image previews will be inserted here -->
                </div>
            </div>
            <div class="md:w-1/2 p-2">
                <div class="form-group mb-4">
                    <label for="category" class="block text-gray-700 font-bold">Category:</label>
                    <select name="category" id="category" class="w-full border border-gray-300 rounded py-2 px-3" required>
                        <option value="Fashion">Fashion</option>
                        <option value="Electronics">Electronics</option>
                        <option value="Lifestyle">Lifestyle</option>
                        <option value="Recreation">Recreation</option>
                        <option value="Collectibles">Collectibles</option>
                        <option value="Resources">Resources</option>
                        <option value="Others">Others</option>
                    </select>
                </div>
                <div class="form-group mb-4">
                    <label class="block text-gray-700 font-bold">Transaction:</label>
                    <div class="transaction-options flex flex-wrap gap-4">
                        <label class="bubble-option">
                            <input type="checkbox" id="Sell" name="transaction" value="Sell">
                            For Sale
                        </label>
                        <label class="bubble-option">
                            <input type="checkbox" id="Trade" name="transaction" value="Trade">
                            For Trade
                        </label>
                        <label class="bubble-option">
                            <input type="checkbox" id="Free" name="transaction" value="Free">
                            For Free
                        </label>
                    </div>
                </div>
                <div class="form-group mb-4">
                    <label for="name" class="block text-gray-700 font-bold">Product Name:</label>
                    <input type="text" name="name" id="name" class="w-full border border-gray-300 rounded py-2 px-3" required>
                </div>
                <div class="form-group mb-4">
                    <label class="block text-gray-700 font-bold">Condition:</label>
                    <div class="condition-options flex flex-wrap gap-4">
                        <label class="bubble-option">
                            <input type="radio" id="brand_new" name="condition" value="Brand new" required>
                            Brand New
                        </label>
                        <label class="bubble-option">
                            <input type="radio" id="lightly_used" name="condition" value="Lightly used">
                            Lightly Used
                        </label>
                        <label class="bubble-option">
                            <input type="radio" id="well_used" name="condition" value="Well used">
                            Well Used
                        </label>
                        <label class="bubble-option">
                            <input type="radio" id="heavily_used" name="condition" value="Heavily used">
                            Heavily Used
                        </label>
                    </div>
                    <span id="condition-error" class="text-red-600 text-sm hidden">Please pick one.</span>
                </div>
                <div class="form-group mb-4">
                    <label for="price" class="block text-gray-700 font-bold">Price:</label>
                    <div class="relative">
                        <span class="absolute inset-y-0 left-0 pl-3 flex items-center text-gray-500">$</span>
                        <input type="text" name="price" id="price" class="pl-6 w-full border border-gray-300 rounded py-2 px-3" pattern="^\d+(\.\d{1,2})?$" title="Please enter a valid price (e.g., 10 or 10.99)" required>
                    </div>
                    <span id="price-error" class="text-red-600 text-sm hidden">Please enter a valid price.</span>
                </div>
                <div class="form-group mb-4">
                    <label for="description" class="block text-gray-700 font-bold">Description:</label>
                    <textarea name="description" id="description" class="w-full border border-gray-300 rounded py-2 px-3" rows="4" required></textarea>
                </div>
                <button type="submit" class="submit-button bg-red-600 text-white py-2 px-4 rounded">Add Product</button>
            </div>
        </div>
    </form>

    <!-- Footer -->
    <%- include('footer') %>

    <script>
        const previewContainer = document.getElementById('image-previews');
        const fileMap = new Map(); // Map to track files by their object URL

        document.addEventListener('DOMContentLoaded', () => {
            const transactionOptions = document.querySelectorAll('.transaction-options .bubble-option input[type="checkbox"]');
            const priceInput = document.getElementById('price');

            transactionOptions.forEach(option => {
                option.addEventListener('change', () => {
                    const selectedOptions = Array.from(transactionOptions).filter(opt => opt.checked);
                    const transactionValues = selectedOptions.map(opt => opt.value);

                    // If "Sell" and "Free" are both selected, uncheck "Free"
                    if (transactionValues.includes('Sell') && transactionValues.includes('Free')) {
                        const freeOption = selectedOptions.find(opt => opt.value === 'Free');
                        freeOption.checked = false;
                        freeOption.parentElement.classList.remove('selected');
                        transactionValues.splice(transactionValues.indexOf('Free'), 1);
                    }

                    // Handle the price input based on transaction types
                    if (transactionValues.includes('Free') && !transactionValues.includes('Sell')) {
                        priceInput.value = '0';
                        priceInput.setAttribute('disabled', 'disabled');
                    } else {
                        priceInput.removeAttribute('disabled');
                        priceInput.value = '';
                    }

                    // Update the visual state of the bubbles
                    transactionOptions.forEach(opt => {
                        if (opt.checked) {
                            opt.parentElement.classList.add('selected');
                        } else {
                            opt.parentElement.classList.remove('selected');
                        }
                    });
                });
            });

            // Existing code to handle the price input pattern validation
            priceInput.addEventListener('input', function (event) {
                const priceError = document.getElementById('price-error');
                if (event.target.validity.patternMismatch) {
                    priceError.classList.remove('hidden');
                } else {
                    priceError.classList.add('hidden');
                }
            });

            const conditionOptions = document.querySelectorAll('.condition-options .bubble-option');
            conditionOptions.forEach(option => {
                option.addEventListener('click', () => {
                    conditionOptions.forEach(opt => opt.classList.remove('selected'));
                    option.classList.add('selected');
                    option.querySelector('input[type="radio"]').checked = true;
                });
            });
        });

        document.addEventListener('DOMContentLoaded', () => {
            const imagesArray = []; // Array to store the files
            const previewContainer = document.getElementById('image-previews');
            const fileInput = document.getElementById('images');
            const form = document.querySelector('form'); // Select the form element

            function previewImages(event) {
                const files = Array.from(event.target.files);

                // Check if adding new files exceeds the maximum allowed
                if (imagesArray.length + files.length > 4) {
                    alert('You can upload a maximum of 4 images.');
                    return;
                }

                files.forEach(file => {
                    // Create a unique identifier for the file using its name and last modified time
                    const fileIdentifier = `${file.name}-${file.lastModified}`;

                    // Check if the file is already in the array by its unique identifier
                    if (!imagesArray.some(existingFile => existingFile.identifier === fileIdentifier)) {
                        // Add new file and its identifier to the array
                        imagesArray.push({ file, identifier: fileIdentifier });

                        const fileURL = URL.createObjectURL(file); // Generate a URL for the file

                        // Create preview element
                        const preview = document.createElement('div');
                        preview.classList.add('image-preview');

                        // Create image element
                        const img = document.createElement('img');
                        img.src = fileURL;
                        preview.appendChild(img);

                        // Create remove button
                        const removeBtn = document.createElement('button');
                        removeBtn.classList.add('remove-btn');
                        removeBtn.innerHTML = '&times;';
                        removeBtn.onclick = function () {
                            // Remove the file from the array by its identifier
                            const index = imagesArray.findIndex(existingFile => existingFile.identifier === fileIdentifier);
                            if (index > -1) {
                                imagesArray.splice(index, 1);
                            }
                            previewContainer.removeChild(preview); // Remove the preview

                            // Update the file input's files
                            updateFileInput();
                        };
                        preview.appendChild(removeBtn);

                        // Append preview to container
                        previewContainer.appendChild(preview);
                    }
                });

                // Update the file input's files
                updateFileInput();
            }

            function updateFileInput() {
                const dataTransfer = new DataTransfer(); // Create a new DataTransfer object

                // Add all files from the array to the DataTransfer object
                imagesArray.forEach(item => {
                    dataTransfer.items.add(item.file);
                });

                // Set the files to the file input element
                fileInput.files = dataTransfer.files;
            }

            // Attach the event listener to the file input
            fileInput.addEventListener('change', previewImages);

            // Handle form submission
            form.addEventListener('submit', (event) => {
                // Prevent default submission to ensure all files are included
                event.preventDefault();

                // Ensure the files are set properly in the input element
                updateFileInput();

                // Now submit the form
                form.submit();
            });
        });
    </script>
</body>
</html>
